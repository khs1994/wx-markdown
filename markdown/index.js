"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var MarkdownHandler = require("towxml");
var towxml = new MarkdownHandler();
function randomInsert(insertArr, arr) {
    if (arr.length > 30) {
        insertArr = __spreadArrays(insertArr, [{ node: 'ad', adId: 'adunit-1246f0a5e441ea4c' }]);
    }
    insertArr.forEach(function (value) {
        return arr.splice(Math.random() * arr.length, 0, value);
    });
    return arr;
}
function parsePath(href) {
    var arr = href.split('/');
    while (true) {
        var index = arr.indexOf('..');
        if (index === -1) {
            break;
        }
        arr[index] = null;
        arr[index - 1] = null;
        arr = arr.filter(function (d) { return d; });
    }
    return arr.join('/');
}
Component({
    properties: {
        markdown: {
            type: String,
            value: '',
        },
        theme: {
            type: String,
            value: 'light',
        },
        ad: {
            type: String,
            value: '',
        },
        fontType: {
            type: String,
            value: '',
        },
        folder: {
            type: String,
            value: '',
        },
    },
    data: {
        MDdata: '',
    },
    lifetimes: {
        attached: function () { },
    },
    observers: {
        markdown: function () {
            if (this.properties.markdown === '') {
                return;
            }
            var MDdata = towxml.toJson(this.properties.markdown, 'markdown');
            MDdata.theme = this.properties.theme;
            MDdata.child = randomInsert([{ node: 'ad', adId: 'adunit-3ea71b7cfce6c721' }], MDdata.child);
            MDdata.fontType = this.properties.fontType;
            this.setData({
                MDdata: MDdata,
            });
        },
    },
    methods: {
        __bind_touchend: function () {
        },
        __bind_touchstart: function () {
        },
        __bind_touchmove: function () {
        },
        __bind_tap: function (res) {
            console.log(res);
            var href = res.currentTarget.dataset._el.attr.href || '';
            if (href.match(/^http:\/\//g) ||
                href.match(/^https:\/\//g) ||
                href === '' ||
                !href.match(/.md$/g)) {
                return;
            }
            var folder = this.properties.folder;
            href = folder === '/' ? href : folder + href;
            if (href.match(/../g)) {
                console.log(href);
                href = parsePath(href);
            }
            wx.navigateTo({
                url: 'index?key=' + href,
            });
            return null;
        },
        __bind_touchcancel: function () { },
    },
});
//# sourceMappingURL=data:application/json;base64,